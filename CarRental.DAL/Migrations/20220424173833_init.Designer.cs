// <auto-generated />
using System;
using CarRental.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.DAL.Migrations
{
    [DbContext(typeof(CarRentalDBContext))]
    [Migration("20220424173833_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRental.DAL.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeOfReceipt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeOfReturn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int");

                    b.Property<int>("PlaceOfReceiptID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceOfReturnID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("ClientID");

                    b.HasIndex("PlaceOfReceiptID");

                    b.HasIndex("PlaceOfReturnID");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarID = 1,
                            ClientID = 1,
                            DateTimeOfReceipt = new DateTime(2021, 6, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTimeOfReturn = new DateTime(2021, 6, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            FinalPrice = 25000,
                            PlaceOfReceiptID = 1,
                            PlaceOfReturnID = 1
                        },
                        new
                        {
                            Id = 2,
                            CarID = 2,
                            ClientID = 2,
                            DateTimeOfReceipt = new DateTime(2021, 9, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTimeOfReturn = new DateTime(2021, 9, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            FinalPrice = 45000,
                            PlaceOfReceiptID = 2,
                            PlaceOfReturnID = 2
                        },
                        new
                        {
                            Id = 3,
                            CarID = 3,
                            ClientID = 4,
                            DateTimeOfReceipt = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTimeOfReturn = new DateTime(2021, 11, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            FinalPrice = 35000,
                            PlaceOfReceiptID = 3,
                            PlaceOfReturnID = 3
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CarTypeID")
                        .HasColumnType("int");

                    b.Property<string>("EngineCapacity")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("FotoName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FuelConsumption")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("FuelTypeID")
                        .HasColumnType("int");

                    b.Property<int>("GearboxTypeID")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlates")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NumberOfDoors")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("PassengerSeats")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("Pledge")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("TrunkVolume")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeID");

                    b.HasIndex("FuelTypeID");

                    b.HasIndex("GearboxTypeID");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarName = "VW POLO SEDAN",
                            CarTypeID = 4,
                            EngineCapacity = "1.4",
                            FotoName = "VW POLO SEDAN.jpg",
                            FuelConsumption = "6-8",
                            FuelTypeID = 1,
                            GearboxTypeID = 1,
                            LicensePlates = "АВ 4324 BB",
                            NumberOfDoors = "4",
                            PassengerSeats = "5",
                            Pledge = 13500,
                            Price = 1200,
                            TrunkVolume = "460"
                        },
                        new
                        {
                            Id = 2,
                            CarName = "FORD FIESTA",
                            CarTypeID = 4,
                            EngineCapacity = "1.6",
                            FotoName = "FORD FIESTA.jpg",
                            FuelConsumption = "6-7",
                            FuelTypeID = 1,
                            GearboxTypeID = 1,
                            LicensePlates = "AB 3354 BB",
                            NumberOfDoors = "5",
                            PassengerSeats = "5",
                            Pledge = 13100,
                            Price = 1100,
                            TrunkVolume = "292"
                        },
                        new
                        {
                            Id = 3,
                            CarName = "NISSAN JUKE",
                            CarTypeID = 2,
                            EngineCapacity = "1.6",
                            FotoName = "NISSAN JUKE.jpg",
                            FuelConsumption = "6-8",
                            FuelTypeID = 1,
                            GearboxTypeID = 1,
                            LicensePlates = "AB 6544 EC",
                            NumberOfDoors = "5",
                            PassengerSeats = "5",
                            Pledge = 17500,
                            Price = 1400,
                            TrunkVolume = "520"
                        },
                        new
                        {
                            Id = 4,
                            CarName = "KIA-SPORTAGE",
                            CarTypeID = 2,
                            EngineCapacity = "1.6",
                            FotoName = "KIA-SPORTAGE.jpg",
                            FuelConsumption = "6-9",
                            FuelTypeID = 1,
                            GearboxTypeID = 1,
                            LicensePlates = "AA 8472 CE",
                            NumberOfDoors = "5",
                            PassengerSeats = "5",
                            Pledge = 23500,
                            Price = 200,
                            TrunkVolume = "580"
                        },
                        new
                        {
                            Id = 5,
                            CarName = "SKODA OCTAVIA A8",
                            CarTypeID = 6,
                            EngineCapacity = "1.6",
                            FotoName = "SKODA OCTAVIA A8.jpg",
                            FuelConsumption = "5-7",
                            FuelTypeID = 1,
                            GearboxTypeID = 1,
                            LicensePlates = "AA 1432 BC",
                            NumberOfDoors = "4",
                            PassengerSeats = "5",
                            Pledge = 21000,
                            Price = 1500,
                            TrunkVolume = "500"
                        },
                        new
                        {
                            Id = 6,
                            CarName = "TOYOTA COROLLA",
                            CarTypeID = 6,
                            EngineCapacity = "1.6",
                            FotoName = "TOYOTA COROLLA.jpg",
                            FuelConsumption = "6-8",
                            FuelTypeID = 1,
                            GearboxTypeID = 1,
                            LicensePlates = "AA 2431 CB",
                            NumberOfDoors = "4",
                            PassengerSeats = "5",
                            Pledge = 19000,
                            Price = 1400,
                            TrunkVolume = "480"
                        },
                        new
                        {
                            Id = 7,
                            CarName = "VW TOUAREG",
                            CarTypeID = 7,
                            EngineCapacity = "1.6",
                            FotoName = "VW TOUAREG.jpg",
                            FuelConsumption = "7.6",
                            FuelTypeID = 2,
                            GearboxTypeID = 1,
                            LicensePlates = "AA 1212 CB",
                            NumberOfDoors = "5",
                            PassengerSeats = "5",
                            Pledge = 64700,
                            Price = 5200,
                            TrunkVolume = "590"
                        },
                        new
                        {
                            Id = 8,
                            CarName = "BMW X5 M PAKET",
                            CarTypeID = 7,
                            EngineCapacity = "3.0",
                            FotoName = "BMW X5 M PAKET.jpg",
                            FuelConsumption = "7.1",
                            FuelTypeID = 2,
                            GearboxTypeID = 1,
                            LicensePlates = "AA 2234 CB",
                            NumberOfDoors = "5",
                            PassengerSeats = "5",
                            Pledge = 99000,
                            Price = 10000,
                            TrunkVolume = "600"
                        },
                        new
                        {
                            Id = 9,
                            CarName = "FORD MONDEO",
                            CarTypeID = 5,
                            EngineCapacity = "2.0",
                            FotoName = "FORD MONDEO.jpg",
                            FuelConsumption = "9-10",
                            FuelTypeID = 1,
                            GearboxTypeID = 1,
                            LicensePlates = "СA 4532 CB",
                            NumberOfDoors = "4",
                            PassengerSeats = "5",
                            Pledge = 30000,
                            Price = 2000,
                            TrunkVolume = "500"
                        },
                        new
                        {
                            Id = 10,
                            CarName = "AUDI A6 S-LINE",
                            CarTypeID = 5,
                            EngineCapacity = "2.0",
                            FotoName = "AUDI A6 S-LINE.jpg",
                            FuelConsumption = "9-10",
                            FuelTypeID = 1,
                            GearboxTypeID = 1,
                            LicensePlates = "AС 2443 CB",
                            NumberOfDoors = "4",
                            PassengerSeats = "5",
                            Pledge = 410000,
                            Price = 4500,
                            TrunkVolume = "565"
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Car_Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Car_Type = "Купе"
                        },
                        new
                        {
                            Id = 2,
                            Car_Type = "Кросовер"
                        },
                        new
                        {
                            Id = 3,
                            Car_Type = "Універсал"
                        },
                        new
                        {
                            Id = 4,
                            Car_Type = "Бюджет"
                        },
                        new
                        {
                            Id = 5,
                            Car_Type = "Бізнес"
                        },
                        new
                        {
                            Id = 6,
                            Car_Type = "Комфорт"
                        },
                        new
                        {
                            Id = 7,
                            Car_Type = "Преміум"
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Київ"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Львів"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Одеса"
                        },
                        new
                        {
                            Id = 4,
                            CityName = "Чернівці"
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientMiddlename")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ClientSurename")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientMiddlename = "Володимирович",
                            ClientName = "Олександр",
                            ClientSurename = "Дзюба",
                            DateOfBirth = new DateTime(2000, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "client1@gmail.com",
                            Gender = "Чоловік",
                            PhoneNumber = "+380 500 111 111"
                        },
                        new
                        {
                            Id = 2,
                            ClientMiddlename = "Миколайович",
                            ClientName = "Денис",
                            ClientSurename = "Миронець",
                            DateOfBirth = new DateTime(2000, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "client2@gmail.com",
                            Gender = "Чоловік",
                            PhoneNumber = "+380 500 222 222"
                        },
                        new
                        {
                            Id = 3,
                            ClientMiddlename = "Кирилович",
                            ClientName = "Сергій",
                            ClientSurename = "Гладик",
                            DateOfBirth = new DateTime(1987, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "client3@gmail.com",
                            Gender = "Чоловік",
                            PhoneNumber = "+380 500 333 333"
                        },
                        new
                        {
                            Id = 4,
                            ClientMiddlename = "Ігорівна",
                            ClientName = "Ірина",
                            ClientSurename = "Палій",
                            DateOfBirth = new DateTime(1990, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "client4@gmail.com",
                            Gender = "Жінка",
                            PhoneNumber = "+380 500 444 444"
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "rentuacarKiev@gmail.com",
                            LocationID = 1,
                            PhoneNumber = "+380 503 456 789"
                        },
                        new
                        {
                            Id = 2,
                            Email = "rentuacarLviv@gmail.com",
                            LocationID = 2,
                            PhoneNumber = "+380 504 456 456"
                        },
                        new
                        {
                            Id = 3,
                            Email = "rentuacarOdessa@gmail.com",
                            LocationID = 3,
                            PhoneNumber = "+380 505 567 567"
                        },
                        new
                        {
                            Id = 4,
                            Email = "rentuacarChernivtsi@gmail.com",
                            LocationID = 4,
                            PhoneNumber = "+380 507 456 321"
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Fuel_Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fuel_Type = "Бензин"
                        },
                        new
                        {
                            Id = 2,
                            Fuel_Type = "Дизель"
                        },
                        new
                        {
                            Id = 3,
                            Fuel_Type = "Електрика"
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.GearboxType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Gearbox_Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("GearboxTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gearbox_Type = "Автомат"
                        },
                        new
                        {
                            Id = 2,
                            Gearbox_Type = "Механіка"
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.LocationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("СityID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("СityID");

                    b.ToTable("LocationDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HouseNumber = "21",
                            Street = "Глибочицька",
                            СityID = 1
                        },
                        new
                        {
                            Id = 2,
                            HouseNumber = "8",
                            Street = "Лічаківська",
                            СityID = 2
                        },
                        new
                        {
                            Id = 3,
                            HouseNumber = "43",
                            Street = "Осипова",
                            СityID = 3
                        },
                        new
                        {
                            Id = 4,
                            HouseNumber = "35",
                            Street = "Героїв Майдану",
                            СityID = 4
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("TextReviews")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("ClientID");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarID = 1,
                            ClientID = 4,
                            Rating = "5",
                            TextReviews = "Все на вищому рівні."
                        },
                        new
                        {
                            Id = 2,
                            CarID = 2,
                            ClientID = 3,
                            Rating = "5",
                            TextReviews = "Все на вищому рівні."
                        },
                        new
                        {
                            Id = 3,
                            CarID = 3,
                            ClientID = 3,
                            Rating = "5",
                            TextReviews = "Все на вищому рівні."
                        },
                        new
                        {
                            Id = 4,
                            CarID = 4,
                            ClientID = 2,
                            Rating = "5",
                            TextReviews = "Все на вищому рівні."
                        },
                        new
                        {
                            Id = 5,
                            CarID = 5,
                            ClientID = 1,
                            Rating = "5",
                            TextReviews = "Все на вищому рівні."
                        });
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Booking", b =>
                {
                    b.HasOne("CarRental.DAL.Entities.Car", "Car")
                        .WithMany("Bookings")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.DAL.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.DAL.Entities.LocationDetails", "Place1")
                        .WithMany("Bookings1")
                        .HasForeignKey("PlaceOfReceiptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.DAL.Entities.LocationDetails", "Place2")
                        .WithMany("Bookings2")
                        .HasForeignKey("PlaceOfReturnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("Place1");

                    b.Navigation("Place2");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Car", b =>
                {
                    b.HasOne("CarRental.DAL.Entities.CarType", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.DAL.Entities.FuelType", "FuelType")
                        .WithMany("Cars")
                        .HasForeignKey("FuelTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.DAL.Entities.GearboxType", "GearboxType")
                        .WithMany("Cars")
                        .HasForeignKey("GearboxTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("FuelType");

                    b.Navigation("GearboxType");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Contact", b =>
                {
                    b.HasOne("CarRental.DAL.Entities.LocationDetails", "LocationDetails")
                        .WithMany("Contacts")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.LocationDetails", b =>
                {
                    b.HasOne("CarRental.DAL.Entities.City", "City")
                        .WithMany("LocationDetails")
                        .HasForeignKey("СityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Review", b =>
                {
                    b.HasOne("CarRental.DAL.Entities.Car", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.DAL.Entities.Client", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Car", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.City", b =>
                {
                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.Client", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.FuelType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.GearboxType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.DAL.Entities.LocationDetails", b =>
                {
                    b.Navigation("Bookings1");

                    b.Navigation("Bookings2");

                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
